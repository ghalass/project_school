name: Deploy My School App

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ R√©cup√©ration du code source
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Connexion √† Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3Ô∏è‚É£ Build des images Docker
      - name: Build backend image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/my_school_backend:latest ./server_expressjs

      - name: Build frontend image
        run: |
          echo "VITE_BASE_URL=http://school.ghalass.com/api" > ./client_coreui_react/.env
          echo "VITE_NODE_ENV=production" >> ./client_coreui_react/.env
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/my_school_frontend:latest ./client_coreui_react

      # 4Ô∏è‚É£ Push des images sur Docker Hub
      - name: Push images
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my_school_backend:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my_school_frontend:latest

      # 5Ô∏è‚É£ Copier docker-compose.yml vers le VPS
      - name: Copy docker-compose.yml to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          source: "docker-compose.yml"
          target: "/root/my_school/"

      # 6Ô∏è‚É£ D√©ploiement sur le VPS avec Certbot corrig√©
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script: |
            set -e

            echo "=== üöÄ D√©marrage du d√©ploiement sur VPS ==="
            sudo mkdir -p /root/my_school
            cd /root/my_school

            echo "=== üì¶ Cr√©ation du fichier .env ==="
            echo "DATABASE_URL=mysql://my_school_user:my_school_pass@db_my_school:3306/my_school_db" > .env
            echo "NODE_ENV=production" >> .env
            echo "PORT=5001" >> .env
            echo "URL=http://localhost" >> .env
            echo "TOKEN_EXPIRE_IN=7h" >> .env
            echo "LETSENCRYPT_EMAIL=msghalas@gmail.com" >> .env
            echo "ACCESS_TOKEN_SECRET=${{ secrets.BACKEND_ACCESS_TOKEN_SECRET }}" >> .env

            echo "=== üîÑ Mise √† jour des images ==="
            sudo docker-compose down || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my_school_backend:latest
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my_school_frontend:latest

            echo "=== üåê V√©rification du r√©seau nginx-proxy ==="
            sudo docker network inspect nginx-proxy >/dev/null 2>&1 || sudo docker network create nginx-proxy

            echo "=== üß© V√©rification du proxy nginx ==="
            if [ -z "$(sudo docker ps -q -f name=nginx-proxy)" ]; then
              sudo docker run -d \
                --name nginx-proxy \
                --network nginx-proxy \
                -p 80:80 -p 443:443 \
                -v /var/run/docker.sock:/tmp/docker.sock:ro \
                -v /etc/nginx/certs:/etc/nginx/certs \
                -v /etc/nginx/vhost.d \
                -v /usr/share/nginx/html \
                jwilder/nginx-proxy
            fi

            echo "=== üîê V√©rification du companion Let's Encrypt ==="
            if [ -z "$(sudo docker ps -q -f name=nginx-proxy-le)" ]; then
              sudo docker run -d \
                --name nginx-proxy-le \
                --network nginx-proxy \
                -v /var/run/docker.sock:/var/run/docker.sock:ro \
                -v /etc/nginx/certs:/etc/nginx/certs \
                -v /etc/nginx/vhost.d:/etc/nginx/vhost.d \
                -v /usr/share/nginx/html:/usr/share/nginx/html \
                -e DEFAULT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }} \
                nginxproxy/acme-companion
            fi

            echo "=== üîß Installation de Certbot si n√©cessaire ==="
            if ! command -v certbot >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y certbot python3-certbot-nginx
            fi

            echo "=== üßæ V√©rification ou g√©n√©ration du certificat SSL ==="
            CERT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
            if [ -z "$CERT_EMAIL" ]; then
              CERT_EMAIL="admin@ghalass.com"
              echo "‚ö†Ô∏è Aucun e-mail d√©fini dans GitHub Secrets, utilisation de $CERT_EMAIL"
            fi

            if [ ! -d "/etc/letsencrypt/live/school.ghalass.com" ]; then
              echo "‚û°Ô∏è G√©n√©ration du certificat initial..."
              sudo certbot --nginx --non-interactive --agree-tos \
                -m "$CERT_EMAIL" \
                -d school.ghalass.com -d api.school.ghalass.com || true
            else
              echo "‚û°Ô∏è Renouvellement automatique du certificat..."
              sudo certbot renew --quiet || true
            fi

            echo "=== üß± Lancement des conteneurs d'application ==="
            sudo docker-compose up -d

            echo "=== ‚úÖ D√©ploiement termin√© avec succ√®s ==="