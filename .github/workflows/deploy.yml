name: Deploy My School App

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout du code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Connexion à Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3️⃣ Build des images Docker
      - name: Build backend image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/my_school_backend:latest ./server_expressjs

      - name: Build frontend image
        run: |
          echo "VITE_BASE_URL=https://school.ghalass.com/api" > ./client_coreui_react/.env
          echo "VITE_NODE_ENV=production" >> ./client_coreui_react/.env
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/my_school_frontend:latest ./client_coreui_react

      # 4️⃣ Push des images
      - name: Push images
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my_school_backend:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my_school_frontend:latest

      # 5️⃣ Copier docker-compose.yml vers le VPS
      - name: Copy docker-compose.yml to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          source: "docker-compose.yml"
          target: "/root/my_school/"

      # 6️⃣ Déploiement sur VPS
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script: |
            set -e
            echo "=== 🚀 Déploiement de l'application My School ==="

            sudo mkdir -p /root/my_school
            cd /root/my_school

            echo "=== 🧹 Nettoyage Docker et suppression anciens conteneurs ==="
            sudo docker stop $(sudo docker ps -q) || true
            sudo docker system prune -af --volumes || true

            # 🔧 Désactiver restart pour éviter le redémarrage auto
            sudo docker update --restart=no nginx-proxy nginx-proxy-le || true

            # Supprimer nginx-proxy et companion s’ils existent
            for c in nginx-proxy nginx-proxy-le; do
              if [ "$(sudo docker ps -aq -f name=$c)" ]; then
                echo "➡️ Suppression du conteneur $c..."
                sudo docker rm -f $c || true
              fi
            done

            echo "=== 📦 Création du fichier .env ==="
            echo "DATABASE_URL=mysql://my_school_user:my_school_pass@db_my_school:3306/my_school_db" > .env
            echo "NODE_ENV=production" >> .env
            echo "PORT=5001" >> .env
            echo "URL=https://school.ghalass.com" >> .env
            echo "TOKEN_EXPIRE_IN=7h" >> .env
            echo "LETSENCRYPT_EMAIL=msghalas@gmail.com" >> .env
            echo "ACCESS_TOKEN_SECRET=${{ secrets.BACKEND_ACCESS_TOKEN_SECRET }}" >> .env

            echo "=== 🔧 Installation de Certbot si nécessaire ==="
            if ! command -v certbot >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y certbot
            fi

            echo "=== 🧾 Génération certificat SSL (standalone) ==="
            CERT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
            if [ -z "$CERT_EMAIL" ]; then
              CERT_EMAIL="admin@ghalass.com"
              echo "⚠️ Aucun e-mail défini dans GitHub Secrets, utilisation de $CERT_EMAIL"
            fi

            if [ ! -d "/etc/letsencrypt/live/school.ghalass.com" ]; then
              echo "➡️ Génération du certificat initial en standalone..."
              sudo certbot certonly --standalone --non-interactive --agree-tos \
                -m "$CERT_EMAIL" \
                -d school.ghalass.com -d api.school.ghalass.com || true
            else
              echo "➡️ Renouvellement automatique du certificat..."
              sudo certbot renew --quiet || true
            fi

            echo "=== 🌐 Vérification du réseau nginx-proxy ==="
            sudo docker network inspect nginx-proxy >/dev/null 2>&1 || sudo docker network create nginx-proxy

            echo "=== 🔥 Forcer la suppression du nginx-proxy juste avant le run ==="
            sudo docker rm -f nginx-proxy || true
            sudo docker rm -f nginx-proxy-le || true

            echo "=== 🔄 Mise à jour des images ==="
            sudo docker-compose down || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my_school_backend:latest
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my_school_frontend:latest

            echo "=== 🧱 Lancement des conteneurs d'application ==="
            sudo docker-compose up -d

            echo "=== ✅ Déploiement terminé avec succès ==="
